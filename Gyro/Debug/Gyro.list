
Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cd8  08002cd8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00002fb4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002fc4  20002fc4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006fdd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f3  00000000  00000000  0002701d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  00028710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  00028db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022076  00000000  00000000  00029378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000932a  00000000  00000000  0004b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd279  00000000  00000000  00054718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121991  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018a8  00000000  00000000  001219e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002ca8 	.word	0x08002ca8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08002ca8 	.word	0x08002ca8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <L3GD20_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void L3GD20_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4849      	ldr	r0, [pc, #292]	; (8000620 <L3GD20_Init+0x130>)
 80004fa:	f001 f973 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80004fe:	2014      	movs	r0, #20
 8000500:	f000 feba 	bl	8001278 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2102      	movs	r1, #2
 8000508:	4845      	ldr	r0, [pc, #276]	; (8000620 <L3GD20_Init+0x130>)
 800050a:	f001 f96b 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800050e:	2014      	movs	r0, #20
 8000510:	f000 feb2 	bl	8001278 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000514:	4b43      	ldr	r3, [pc, #268]	; (8000624 <L3GD20_Init+0x134>)
 8000516:	2220      	movs	r2, #32
 8000518:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 800051a:	4b42      	ldr	r3, [pc, #264]	; (8000624 <L3GD20_Init+0x134>)
 800051c:	22ff      	movs	r2, #255	; 0xff
 800051e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000520:	2332      	movs	r3, #50	; 0x32
 8000522:	2202      	movs	r2, #2
 8000524:	493f      	ldr	r1, [pc, #252]	; (8000624 <L3GD20_Init+0x134>)
 8000526:	4840      	ldr	r0, [pc, #256]	; (8000628 <L3GD20_Init+0x138>)
 8000528:	f001 fe73 	bl	8002212 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2102      	movs	r1, #2
 8000530:	483b      	ldr	r0, [pc, #236]	; (8000620 <L3GD20_Init+0x130>)
 8000532:	f001 f957 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000536:	2014      	movs	r0, #20
 8000538:	f000 fe9e 	bl	8001278 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	4837      	ldr	r0, [pc, #220]	; (8000620 <L3GD20_Init+0x130>)
 8000542:	f001 f94f 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000546:	2014      	movs	r0, #20
 8000548:	f000 fe96 	bl	8001278 <HAL_Delay>
	spiTxBuf[0]=0x21;
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <L3GD20_Init+0x134>)
 800054e:	2221      	movs	r2, #33	; 0x21
 8000550:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <L3GD20_Init+0x134>)
 8000554:	2200      	movs	r2, #0
 8000556:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000558:	2332      	movs	r3, #50	; 0x32
 800055a:	2202      	movs	r2, #2
 800055c:	4931      	ldr	r1, [pc, #196]	; (8000624 <L3GD20_Init+0x134>)
 800055e:	4832      	ldr	r0, [pc, #200]	; (8000628 <L3GD20_Init+0x138>)
 8000560:	f001 fe57 	bl	8002212 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2102      	movs	r1, #2
 8000568:	482d      	ldr	r0, [pc, #180]	; (8000620 <L3GD20_Init+0x130>)
 800056a:	f001 f93b 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800056e:	2014      	movs	r0, #20
 8000570:	f000 fe82 	bl	8001278 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2102      	movs	r1, #2
 8000578:	4829      	ldr	r0, [pc, #164]	; (8000620 <L3GD20_Init+0x130>)
 800057a:	f001 f933 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800057e:	2014      	movs	r0, #20
 8000580:	f000 fe7a 	bl	8001278 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <L3GD20_Init+0x134>)
 8000586:	2222      	movs	r2, #34	; 0x22
 8000588:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <L3GD20_Init+0x134>)
 800058c:	2200      	movs	r2, #0
 800058e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000590:	2332      	movs	r3, #50	; 0x32
 8000592:	2202      	movs	r2, #2
 8000594:	4923      	ldr	r1, [pc, #140]	; (8000624 <L3GD20_Init+0x134>)
 8000596:	4824      	ldr	r0, [pc, #144]	; (8000628 <L3GD20_Init+0x138>)
 8000598:	f001 fe3b 	bl	8002212 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2102      	movs	r1, #2
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <L3GD20_Init+0x130>)
 80005a2:	f001 f91f 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f000 fe66 	bl	8001278 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2102      	movs	r1, #2
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <L3GD20_Init+0x130>)
 80005b2:	f001 f917 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005b6:	2014      	movs	r0, #20
 80005b8:	f000 fe5e 	bl	8001278 <HAL_Delay>
	spiTxBuf[0]=0x23;
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <L3GD20_Init+0x134>)
 80005be:	2223      	movs	r2, #35	; 0x23
 80005c0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <L3GD20_Init+0x134>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80005c8:	2332      	movs	r3, #50	; 0x32
 80005ca:	2202      	movs	r2, #2
 80005cc:	4915      	ldr	r1, [pc, #84]	; (8000624 <L3GD20_Init+0x134>)
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <L3GD20_Init+0x138>)
 80005d0:	f001 fe1f 	bl	8002212 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	4811      	ldr	r0, [pc, #68]	; (8000620 <L3GD20_Init+0x130>)
 80005da:	f001 f903 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005de:	2014      	movs	r0, #20
 80005e0:	f000 fe4a 	bl	8001278 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2102      	movs	r1, #2
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <L3GD20_Init+0x130>)
 80005ea:	f001 f8fb 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005ee:	2014      	movs	r0, #20
 80005f0:	f000 fe42 	bl	8001278 <HAL_Delay>
	spiTxBuf[0]=0x24;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <L3GD20_Init+0x134>)
 80005f6:	2224      	movs	r2, #36	; 0x24
 80005f8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <L3GD20_Init+0x134>)
 80005fc:	2210      	movs	r2, #16
 80005fe:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000600:	2332      	movs	r3, #50	; 0x32
 8000602:	2202      	movs	r2, #2
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <L3GD20_Init+0x134>)
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <L3GD20_Init+0x138>)
 8000608:	f001 fe03 	bl	8002212 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <L3GD20_Init+0x130>)
 8000612:	f001 f8e7 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000616:	2014      	movs	r0, #20
 8000618:	f000 fe2e 	bl	8001278 <HAL_Delay>

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020800 	.word	0x40020800
 8000624:	20002f5c 	.word	0x20002f5c
 8000628:	20002f68 	.word	0x20002f68

0800062c <L3GD20_loop>:

void L3GD20_loop(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b098      	sub	sp, #96	; 0x60
 8000630:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8000632:	2300      	movs	r3, #0
 8000634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8000638:	2300      	movs	r3, #0
 800063a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800063e:	2300      	movs	r3, #0
 8000640:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8000648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8000686:	4b55      	ldr	r3, [pc, #340]	; (80007dc <L3GD20_loop+0x1b0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <L3GD20_loop+0x6a>
 800068e:	2b01      	cmp	r3, #1
 8000690:	f000 80ba 	beq.w	8000808 <L3GD20_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8000694:	e359      	b.n	8000d4a <L3GD20_loop+0x71e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8000696:	4b52      	ldr	r3, [pc, #328]	; (80007e0 <L3GD20_loop+0x1b4>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	f040 8354 	bne.w	8000d48 <L3GD20_loop+0x71c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2102      	movs	r1, #2
 80006a4:	484f      	ldr	r0, [pc, #316]	; (80007e4 <L3GD20_loop+0x1b8>)
 80006a6:	f001 f89d 	bl	80017e4 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 80006aa:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <L3GD20_loop+0x1bc>)
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	2201      	movs	r2, #1
 80006b4:	494c      	ldr	r1, [pc, #304]	; (80007e8 <L3GD20_loop+0x1bc>)
 80006b6:	484d      	ldr	r0, [pc, #308]	; (80007ec <L3GD20_loop+0x1c0>)
 80006b8:	f001 fdab 	bl	8002212 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	2201      	movs	r2, #1
 80006c0:	494b      	ldr	r1, [pc, #300]	; (80007f0 <L3GD20_loop+0x1c4>)
 80006c2:	484a      	ldr	r0, [pc, #296]	; (80007ec <L3GD20_loop+0x1c0>)
 80006c4:	f001 fee1 	bl	800248a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2102      	movs	r1, #2
 80006cc:	4845      	ldr	r0, [pc, #276]	; (80007e4 <L3GD20_loop+0x1b8>)
 80006ce:	f001 f889 	bl	80017e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2102      	movs	r1, #2
 80006d6:	4843      	ldr	r0, [pc, #268]	; (80007e4 <L3GD20_loop+0x1b8>)
 80006d8:	f001 f884 	bl	80017e4 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <L3GD20_loop+0x1bc>)
 80006de:	22a9      	movs	r2, #169	; 0xa9
 80006e0:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80006e2:	2332      	movs	r3, #50	; 0x32
 80006e4:	2201      	movs	r2, #1
 80006e6:	4940      	ldr	r1, [pc, #256]	; (80007e8 <L3GD20_loop+0x1bc>)
 80006e8:	4840      	ldr	r0, [pc, #256]	; (80007ec <L3GD20_loop+0x1c0>)
 80006ea:	f001 fd92 	bl	8002212 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 80006ee:	2332      	movs	r3, #50	; 0x32
 80006f0:	2201      	movs	r2, #1
 80006f2:	4940      	ldr	r1, [pc, #256]	; (80007f4 <L3GD20_loop+0x1c8>)
 80006f4:	483d      	ldr	r0, [pc, #244]	; (80007ec <L3GD20_loop+0x1c0>)
 80006f6:	f001 fec8 	bl	800248a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	4839      	ldr	r0, [pc, #228]	; (80007e4 <L3GD20_loop+0x1b8>)
 8000700:	f001 f870 	bl	80017e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2102      	movs	r1, #2
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <L3GD20_loop+0x1b8>)
 800070a:	f001 f86b 	bl	80017e4 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <L3GD20_loop+0x1bc>)
 8000710:	22aa      	movs	r2, #170	; 0xaa
 8000712:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000714:	2332      	movs	r3, #50	; 0x32
 8000716:	2201      	movs	r2, #1
 8000718:	4933      	ldr	r1, [pc, #204]	; (80007e8 <L3GD20_loop+0x1bc>)
 800071a:	4834      	ldr	r0, [pc, #208]	; (80007ec <L3GD20_loop+0x1c0>)
 800071c:	f001 fd79 	bl	8002212 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8000720:	2332      	movs	r3, #50	; 0x32
 8000722:	2201      	movs	r2, #1
 8000724:	4934      	ldr	r1, [pc, #208]	; (80007f8 <L3GD20_loop+0x1cc>)
 8000726:	4831      	ldr	r0, [pc, #196]	; (80007ec <L3GD20_loop+0x1c0>)
 8000728:	f001 feaf 	bl	800248a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <L3GD20_loop+0x1b8>)
 8000732:	f001 f857 	bl	80017e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2102      	movs	r1, #2
 800073a:	482a      	ldr	r0, [pc, #168]	; (80007e4 <L3GD20_loop+0x1b8>)
 800073c:	f001 f852 	bl	80017e4 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <L3GD20_loop+0x1bc>)
 8000742:	22ab      	movs	r2, #171	; 0xab
 8000744:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000746:	2332      	movs	r3, #50	; 0x32
 8000748:	2201      	movs	r2, #1
 800074a:	4927      	ldr	r1, [pc, #156]	; (80007e8 <L3GD20_loop+0x1bc>)
 800074c:	4827      	ldr	r0, [pc, #156]	; (80007ec <L3GD20_loop+0x1c0>)
 800074e:	f001 fd60 	bl	8002212 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8000752:	2332      	movs	r3, #50	; 0x32
 8000754:	2201      	movs	r2, #1
 8000756:	4929      	ldr	r1, [pc, #164]	; (80007fc <L3GD20_loop+0x1d0>)
 8000758:	4824      	ldr	r0, [pc, #144]	; (80007ec <L3GD20_loop+0x1c0>)
 800075a:	f001 fe96 	bl	800248a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2102      	movs	r1, #2
 8000762:	4820      	ldr	r0, [pc, #128]	; (80007e4 <L3GD20_loop+0x1b8>)
 8000764:	f001 f83e 	bl	80017e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2102      	movs	r1, #2
 800076c:	481d      	ldr	r0, [pc, #116]	; (80007e4 <L3GD20_loop+0x1b8>)
 800076e:	f001 f839 	bl	80017e4 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <L3GD20_loop+0x1bc>)
 8000774:	22ac      	movs	r2, #172	; 0xac
 8000776:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000778:	2332      	movs	r3, #50	; 0x32
 800077a:	2201      	movs	r2, #1
 800077c:	491a      	ldr	r1, [pc, #104]	; (80007e8 <L3GD20_loop+0x1bc>)
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <L3GD20_loop+0x1c0>)
 8000780:	f001 fd47 	bl	8002212 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8000784:	2332      	movs	r3, #50	; 0x32
 8000786:	2201      	movs	r2, #1
 8000788:	491d      	ldr	r1, [pc, #116]	; (8000800 <L3GD20_loop+0x1d4>)
 800078a:	4818      	ldr	r0, [pc, #96]	; (80007ec <L3GD20_loop+0x1c0>)
 800078c:	f001 fe7d 	bl	800248a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2102      	movs	r1, #2
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <L3GD20_loop+0x1b8>)
 8000796:	f001 f825 	bl	80017e4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2102      	movs	r1, #2
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <L3GD20_loop+0x1b8>)
 80007a0:	f001 f820 	bl	80017e4 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <L3GD20_loop+0x1bc>)
 80007a6:	22ad      	movs	r2, #173	; 0xad
 80007a8:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 80007aa:	2332      	movs	r3, #50	; 0x32
 80007ac:	2201      	movs	r2, #1
 80007ae:	490e      	ldr	r1, [pc, #56]	; (80007e8 <L3GD20_loop+0x1bc>)
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <L3GD20_loop+0x1c0>)
 80007b2:	f001 fd2e 	bl	8002212 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 80007b6:	2332      	movs	r3, #50	; 0x32
 80007b8:	2201      	movs	r2, #1
 80007ba:	4912      	ldr	r1, [pc, #72]	; (8000804 <L3GD20_loop+0x1d8>)
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <L3GD20_loop+0x1c0>)
 80007be:	f001 fe64 	bl	800248a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <L3GD20_loop+0x1b8>)
 80007c8:	f001 f80c 	bl	80017e4 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <L3GD20_loop+0x1b0>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80007d2:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <L3GD20_loop+0x1b4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
				break;
 80007d8:	e2b6      	b.n	8000d48 <L3GD20_loop+0x71c>
 80007da:	bf00      	nop
 80007dc:	2000002d 	.word	0x2000002d
 80007e0:	20000000 	.word	0x20000000
 80007e4:	40020800 	.word	0x40020800
 80007e8:	20002f5c 	.word	0x20002f5c
 80007ec:	20002f68 	.word	0x20002f68
 80007f0:	20002f61 	.word	0x20002f61
 80007f4:	20002f62 	.word	0x20002f62
 80007f8:	20002f63 	.word	0x20002f63
 80007fc:	20002f64 	.word	0x20002f64
 8000800:	20002f65 	.word	0x20002f65
 8000804:	20002f66 	.word	0x20002f66
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8000808:	4b99      	ldr	r3, [pc, #612]	; (8000a70 <L3GD20_loop+0x444>)
 800080a:	789b      	ldrb	r3, [r3, #2]
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	b21a      	sxth	r2, r3
 8000810:	4b97      	ldr	r3, [pc, #604]	; (8000a70 <L3GD20_loop+0x444>)
 8000812:	785b      	ldrb	r3, [r3, #1]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 800081e:	4b94      	ldr	r3, [pc, #592]	; (8000a70 <L3GD20_loop+0x444>)
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	b21a      	sxth	r2, r3
 8000826:	4b92      	ldr	r3, [pc, #584]	; (8000a70 <L3GD20_loop+0x444>)
 8000828:	78db      	ldrb	r3, [r3, #3]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21b      	sxth	r3, r3
 8000830:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8000834:	4b8e      	ldr	r3, [pc, #568]	; (8000a70 <L3GD20_loop+0x444>)
 8000836:	799b      	ldrb	r3, [r3, #6]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b21a      	sxth	r2, r3
 800083c:	4b8c      	ldr	r3, [pc, #560]	; (8000a70 <L3GD20_loop+0x444>)
 800083e:	795b      	ldrb	r3, [r3, #5]
 8000840:	b21b      	sxth	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b21b      	sxth	r3, r3
 8000846:	87fb      	strh	r3, [r7, #62]	; 0x3e
			if(currentcalistate==L3GD20_calibrated)
 8000848:	4b8a      	ldr	r3, [pc, #552]	; (8000a74 <L3GD20_loop+0x448>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	f040 80d5 	bne.w	80009fc <L3GD20_loop+0x3d0>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8000852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000856:	b21b      	sxth	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4b87      	ldr	r3, [pc, #540]	; (8000a78 <L3GD20_loop+0x44c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000868:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8000a7c <L3GD20_loop+0x450>
 800086c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000870:	4b83      	ldr	r3, [pc, #524]	; (8000a80 <L3GD20_loop+0x454>)
 8000872:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8000876:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800087a:	b21b      	sxth	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4b81      	ldr	r3, [pc, #516]	; (8000a84 <L3GD20_loop+0x458>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8000a7c <L3GD20_loop+0x450>
 8000890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000894:	4b7c      	ldr	r3, [pc, #496]	; (8000a88 <L3GD20_loop+0x45c>)
 8000896:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 800089a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800089c:	b21b      	sxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4b7a      	ldr	r3, [pc, #488]	; (8000a8c <L3GD20_loop+0x460>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ae:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000a7c <L3GD20_loop+0x450>
 80008b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b6:	4b76      	ldr	r3, [pc, #472]	; (8000a90 <L3GD20_loop+0x464>)
 80008b8:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80008bc:	4b75      	ldr	r3, [pc, #468]	; (8000a94 <L3GD20_loop+0x468>)
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80008c0:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <L3GD20_loop+0x454>)
 80008c2:	ed93 7a00 	vldr	s14, [r3]
 80008c6:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <L3GD20_loop+0x46c>)
 80008c8:	edd3 7a00 	vldr	s15, [r3]
 80008cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d4:	dc0c      	bgt.n	80008f0 <L3GD20_loop+0x2c4>
 80008d6:	4b70      	ldr	r3, [pc, #448]	; (8000a98 <L3GD20_loop+0x46c>)
 80008d8:	edd3 7a00 	vldr	s15, [r3]
 80008dc:	eeb1 7a67 	vneg.f32	s14, s15
 80008e0:	4b67      	ldr	r3, [pc, #412]	; (8000a80 <L3GD20_loop+0x454>)
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ee:	dd1b      	ble.n	8000928 <L3GD20_loop+0x2fc>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80008f0:	4b63      	ldr	r3, [pc, #396]	; (8000a80 <L3GD20_loop+0x454>)
 80008f2:	ed93 7a00 	vldr	s14, [r3]
 80008f6:	4b69      	ldr	r3, [pc, #420]	; (8000a9c <L3GD20_loop+0x470>)
 80008f8:	edd3 7a00 	vldr	s15, [r3]
 80008fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000900:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000908:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800090c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000910:	4b63      	ldr	r3, [pc, #396]	; (8000aa0 <L3GD20_loop+0x474>)
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091a:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <L3GD20_loop+0x474>)
 800091c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8000920:	4b57      	ldr	r3, [pc, #348]	; (8000a80 <L3GD20_loop+0x454>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a5d      	ldr	r2, [pc, #372]	; (8000a9c <L3GD20_loop+0x470>)
 8000926:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8000928:	4b57      	ldr	r3, [pc, #348]	; (8000a88 <L3GD20_loop+0x45c>)
 800092a:	ed93 7a00 	vldr	s14, [r3]
 800092e:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <L3GD20_loop+0x478>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	dc0c      	bgt.n	8000958 <L3GD20_loop+0x32c>
 800093e:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <L3GD20_loop+0x478>)
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	eeb1 7a67 	vneg.f32	s14, s15
 8000948:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <L3GD20_loop+0x45c>)
 800094a:	edd3 7a00 	vldr	s15, [r3]
 800094e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000956:	dd1b      	ble.n	8000990 <L3GD20_loop+0x364>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <L3GD20_loop+0x45c>)
 800095a:	ed93 7a00 	vldr	s14, [r3]
 800095e:	4b52      	ldr	r3, [pc, #328]	; (8000aa8 <L3GD20_loop+0x47c>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000968:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800096c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000970:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000978:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <L3GD20_loop+0x480>)
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000982:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <L3GD20_loop+0x480>)
 8000984:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8000988:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <L3GD20_loop+0x45c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a46      	ldr	r2, [pc, #280]	; (8000aa8 <L3GD20_loop+0x47c>)
 800098e:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8000990:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <L3GD20_loop+0x464>)
 8000992:	ed93 7a00 	vldr	s14, [r3]
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <L3GD20_loop+0x484>)
 8000998:	edd3 7a00 	vldr	s15, [r3]
 800099c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a4:	dc0d      	bgt.n	80009c2 <L3GD20_loop+0x396>
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <L3GD20_loop+0x484>)
 80009a8:	edd3 7a00 	vldr	s15, [r3]
 80009ac:	eeb1 7a67 	vneg.f32	s14, s15
 80009b0:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <L3GD20_loop+0x464>)
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	f340 81bc 	ble.w	8000d3a <L3GD20_loop+0x70e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <L3GD20_loop+0x464>)
 80009c4:	ed93 7a00 	vldr	s14, [r3]
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <L3GD20_loop+0x488>)
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80009de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <L3GD20_loop+0x48c>)
 80009e4:	edd3 7a00 	vldr	s15, [r3]
 80009e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <L3GD20_loop+0x48c>)
 80009ee:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <L3GD20_loop+0x464>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <L3GD20_loop+0x488>)
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	e19e      	b.n	8000d3a <L3GD20_loop+0x70e>
				switch(currentcalistate)
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <L3GD20_loop+0x448>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	f000 8195 	beq.w	8000d30 <L3GD20_loop+0x704>
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	f300 8194 	bgt.w	8000d34 <L3GD20_loop+0x708>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <L3GD20_loop+0x3ea>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d029      	beq.n	8000a68 <L3GD20_loop+0x43c>
						break;
 8000a14:	e18e      	b.n	8000d34 <L3GD20_loop+0x708>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <L3GD20_loop+0x490>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000a1e:	b211      	sxth	r1, r2
 8000a20:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <L3GD20_loop+0x494>)
 8000a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <L3GD20_loop+0x490>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000a2e:	b211      	sxth	r1, r2
 8000a30:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <L3GD20_loop+0x498>)
 8000a32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <L3GD20_loop+0x490>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000a3c:	b211      	sxth	r1, r2
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <L3GD20_loop+0x49c>)
 8000a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <L3GD20_loop+0x490>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <L3GD20_loop+0x490>)
 8000a4c:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <L3GD20_loop+0x490>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a56:	f0c0 816f 	bcc.w	8000d38 <L3GD20_loop+0x70c>
							caliCounter=0;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <L3GD20_loop+0x490>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <L3GD20_loop+0x448>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
						break;
 8000a66:	e167      	b.n	8000d38 <L3GD20_loop+0x70c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a6c:	e09f      	b.n	8000bae <L3GD20_loop+0x582>
 8000a6e:	bf00      	nop
 8000a70:	20002f60 	.word	0x20002f60
 8000a74:	2000002c 	.word	0x2000002c
 8000a78:	2000003c 	.word	0x2000003c
 8000a7c:	3d8f5c29 	.word	0x3d8f5c29
 8000a80:	20000030 	.word	0x20000030
 8000a84:	20000040 	.word	0x20000040
 8000a88:	20000034 	.word	0x20000034
 8000a8c:	20000044 	.word	0x20000044
 8000a90:	20000038 	.word	0x20000038
 8000a94:	3b449ba6 	.word	0x3b449ba6
 8000a98:	20000048 	.word	0x20000048
 8000a9c:	20000060 	.word	0x20000060
 8000aa0:	20000054 	.word	0x20000054
 8000aa4:	2000004c 	.word	0x2000004c
 8000aa8:	20000064 	.word	0x20000064
 8000aac:	20000058 	.word	0x20000058
 8000ab0:	20000050 	.word	0x20000050
 8000ab4:	20000068 	.word	0x20000068
 8000ab8:	2000005c 	.word	0x2000005c
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	2000007c 	.word	0x2000007c
 8000ac4:	2000101c 	.word	0x2000101c
 8000ac8:	20001fbc 	.word	0x20001fbc
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8000acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	3360      	adds	r3, #96	; 0x60
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	499d      	ldr	r1, [pc, #628]	; (8000d54 <L3GD20_loop+0x728>)
 8000ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ae2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8000aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	3360      	adds	r3, #96	; 0x60
 8000af0:	443b      	add	r3, r7
 8000af2:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8000af6:	461a      	mov	r2, r3
 8000af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	4996      	ldr	r1, [pc, #600]	; (8000d58 <L3GD20_loop+0x72c>)
 8000afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b00:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000b04:	4413      	add	r3, r2
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8000b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	3360      	adds	r3, #96	; 0x60
 8000b0e:	443b      	add	r3, r7
 8000b10:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8000b14:	461a      	mov	r2, r3
 8000b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	4990      	ldr	r1, [pc, #576]	; (8000d5c <L3GD20_loop+0x730>)
 8000b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b1e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000b22:	4413      	add	r3, r2
 8000b24:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8000b26:	4a8b      	ldr	r2, [pc, #556]	; (8000d54 <L3GD20_loop+0x728>)
 8000b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	3360      	adds	r3, #96	; 0x60
 8000b34:	443b      	add	r3, r7
 8000b36:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8000b3a:	4a87      	ldr	r2, [pc, #540]	; (8000d58 <L3GD20_loop+0x72c>)
 8000b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b3e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	3360      	adds	r3, #96	; 0x60
 8000b48:	443b      	add	r3, r7
 8000b4a:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8000b4e:	4a83      	ldr	r2, [pc, #524]	; (8000d5c <L3GD20_loop+0x730>)
 8000b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b52:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	3360      	adds	r3, #96	; 0x60
 8000b5c:	443b      	add	r3, r7
 8000b5e:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8000b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b64:	4a7e      	ldr	r2, [pc, #504]	; (8000d60 <L3GD20_loop+0x734>)
 8000b66:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6a:	1092      	asrs	r2, r2, #2
 8000b6c:	17db      	asrs	r3, r3, #31
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	4a7c      	ldr	r2, [pc, #496]	; (8000d64 <L3GD20_loop+0x738>)
 8000b72:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8000b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b76:	4a7a      	ldr	r2, [pc, #488]	; (8000d60 <L3GD20_loop+0x734>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1092      	asrs	r2, r2, #2
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4a79      	ldr	r2, [pc, #484]	; (8000d68 <L3GD20_loop+0x73c>)
 8000b84:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8000b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b88:	4a75      	ldr	r2, [pc, #468]	; (8000d60 <L3GD20_loop+0x734>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1092      	asrs	r2, r2, #2
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a75      	ldr	r2, [pc, #468]	; (8000d6c <L3GD20_loop+0x740>)
 8000b96:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8000b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8000b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d901      	bls.n	8000ba8 <L3GD20_loop+0x57c>
									windowPosition=0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000baa:	3301      	adds	r3, #1
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bb4:	d38a      	bcc.n	8000acc <L3GD20_loop+0x4a0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bba:	e089      	b.n	8000cd0 <L3GD20_loop+0x6a4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8000bbc:	4a65      	ldr	r2, [pc, #404]	; (8000d54 <L3GD20_loop+0x728>)
 8000bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bc0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b67      	ldr	r3, [pc, #412]	; (8000d64 <L3GD20_loop+0x738>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <L3GD20_loop+0x744>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dd0a      	ble.n	8000bea <L3GD20_loop+0x5be>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8000bd4:	4a5f      	ldr	r2, [pc, #380]	; (8000d54 <L3GD20_loop+0x728>)
 8000bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bd8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b61      	ldr	r3, [pc, #388]	; (8000d64 <L3GD20_loop+0x738>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	4a62      	ldr	r2, [pc, #392]	; (8000d70 <L3GD20_loop+0x744>)
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e015      	b.n	8000c16 <L3GD20_loop+0x5ea>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8000bea:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <L3GD20_loop+0x728>)
 8000bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <L3GD20_loop+0x738>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1ad2      	subs	r2, r2, r3
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	; (8000d70 <L3GD20_loop+0x744>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	425b      	negs	r3, r3
 8000c00:	429a      	cmp	r2, r3
 8000c02:	da08      	bge.n	8000c16 <L3GD20_loop+0x5ea>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8000c04:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <L3GD20_loop+0x738>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4952      	ldr	r1, [pc, #328]	; (8000d54 <L3GD20_loop+0x728>)
 8000c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c0c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000c10:	1a9b      	subs	r3, r3, r2
 8000c12:	4a57      	ldr	r2, [pc, #348]	; (8000d70 <L3GD20_loop+0x744>)
 8000c14:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8000c16:	4a50      	ldr	r2, [pc, #320]	; (8000d58 <L3GD20_loop+0x72c>)
 8000c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c1a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <L3GD20_loop+0x73c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	4b53      	ldr	r3, [pc, #332]	; (8000d74 <L3GD20_loop+0x748>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	dd0a      	ble.n	8000c44 <L3GD20_loop+0x618>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8000c2e:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <L3GD20_loop+0x72c>)
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <L3GD20_loop+0x73c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	4a4d      	ldr	r2, [pc, #308]	; (8000d74 <L3GD20_loop+0x748>)
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e015      	b.n	8000c70 <L3GD20_loop+0x644>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8000c44:	4a44      	ldr	r2, [pc, #272]	; (8000d58 <L3GD20_loop+0x72c>)
 8000c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <L3GD20_loop+0x73c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <L3GD20_loop+0x748>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	425b      	negs	r3, r3
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	da08      	bge.n	8000c70 <L3GD20_loop+0x644>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <L3GD20_loop+0x73c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	493d      	ldr	r1, [pc, #244]	; (8000d58 <L3GD20_loop+0x72c>)
 8000c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c66:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	4a41      	ldr	r2, [pc, #260]	; (8000d74 <L3GD20_loop+0x748>)
 8000c6e:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8000c70:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <L3GD20_loop+0x730>)
 8000c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c74:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <L3GD20_loop+0x740>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1ad2      	subs	r2, r2, r3
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <L3GD20_loop+0x74c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dd0a      	ble.n	8000c9e <L3GD20_loop+0x672>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8000c88:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <L3GD20_loop+0x730>)
 8000c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c8c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <L3GD20_loop+0x740>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	4a37      	ldr	r2, [pc, #220]	; (8000d78 <L3GD20_loop+0x74c>)
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e015      	b.n	8000cca <L3GD20_loop+0x69e>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <L3GD20_loop+0x730>)
 8000ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ca2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <L3GD20_loop+0x740>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1ad2      	subs	r2, r2, r3
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <L3GD20_loop+0x74c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	da08      	bge.n	8000cca <L3GD20_loop+0x69e>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <L3GD20_loop+0x740>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4927      	ldr	r1, [pc, #156]	; (8000d5c <L3GD20_loop+0x730>)
 8000cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000cc4:	1a9b      	subs	r3, r3, r2
 8000cc6:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <L3GD20_loop+0x74c>)
 8000cc8:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	3301      	adds	r3, #1
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cd6:	f4ff af71 	bcc.w	8000bbc <L3GD20_loop+0x590>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <L3GD20_loop+0x744>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000d7c <L3GD20_loop+0x750>
 8000cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <L3GD20_loop+0x754>)
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <L3GD20_loop+0x748>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d00:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000d7c <L3GD20_loop+0x750>
 8000d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <L3GD20_loop+0x758>)
 8000d0a:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <L3GD20_loop+0x74c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000d7c <L3GD20_loop+0x750>
 8000d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <L3GD20_loop+0x75c>)
 8000d24:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <L3GD20_loop+0x760>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
							break;
 8000d2e:	e004      	b.n	8000d3a <L3GD20_loop+0x70e>
						break;
 8000d30:	bf00      	nop
 8000d32:	e002      	b.n	8000d3a <L3GD20_loop+0x70e>
						break;
 8000d34:	bf00      	nop
 8000d36:	e000      	b.n	8000d3a <L3GD20_loop+0x70e>
						break;
 8000d38:	bf00      	nop
			currentState=L3GD20_fisrt;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <L3GD20_loop+0x764>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <L3GD20_loop+0x768>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
			break;
 8000d46:	e000      	b.n	8000d4a <L3GD20_loop+0x71e>
				break;
 8000d48:	bf00      	nop

		}
}
 8000d4a:	bf00      	nop
 8000d4c:	3760      	adds	r7, #96	; 0x60
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000007c 	.word	0x2000007c
 8000d58:	2000101c 	.word	0x2000101c
 8000d5c:	20001fbc 	.word	0x20001fbc
 8000d60:	66666667 	.word	0x66666667
 8000d64:	2000003c 	.word	0x2000003c
 8000d68:	20000040 	.word	0x20000040
 8000d6c:	20000044 	.word	0x20000044
 8000d70:	2000006c 	.word	0x2000006c
 8000d74:	20000070 	.word	0x20000070
 8000d78:	20000074 	.word	0x20000074
 8000d7c:	3d8f5c29 	.word	0x3d8f5c29
 8000d80:	20000048 	.word	0x20000048
 8000d84:	2000004c 	.word	0x2000004c
 8000d88:	20000050 	.word	0x20000050
 8000d8c:	2000002c 	.word	0x2000002c
 8000d90:	2000002d 	.word	0x2000002d
 8000d94:	20000000 	.word	0x20000000

08000d98 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a29      	ldr	r2, [pc, #164]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2102      	movs	r1, #2
 8000e06:	4816      	ldr	r0, [pc, #88]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e08:	f000 fcec 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <MX_GPIO_Init+0xcc>)
 8000e14:	f000 fce6 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e30:	f000 fb2c 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_GPIO_Init+0xcc>)
 8000e4e:	f000 fb1d 	bl	800148c <HAL_GPIO_Init>

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40021800 	.word	0x40021800

08000e68 <main>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 f992 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f80c 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f7ff ff90 	bl	8000d98 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000e78:	f000 f880 	bl	8000f7c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
	L3GD20_Init();
 8000e7c:	f7ff fb38 	bl	80004f0 <L3GD20_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		L3GD20_loop();
 8000e80:	f7ff fbd4 	bl	800062c <L3GD20_loop>
		HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 f9f7 	bl	8001278 <HAL_Delay>
		L3GD20_loop();
 8000e8a:	e7f9      	b.n	8000e80 <main+0x18>

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	; 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fefc 	bl	8002c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <SystemClock_Config+0xd8>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <SystemClock_Config+0xd8>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <SystemClock_Config+0xd8>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <SystemClock_Config+0xdc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <SystemClock_Config+0xdc>)
 8000ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <SystemClock_Config+0xdc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000efc:	2308      	movs	r3, #8
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f00:	23b4      	movs	r3, #180	; 0xb4
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fcd1 	bl	80018b8 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f1c:	f000 f826 	bl	8000f6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f20:	f000 fc7a 	bl	8001818 <HAL_PWREx_EnableOverDrive>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f2a:	f000 f81f 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2105      	movs	r1, #5
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 ff2b 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f58:	f000 f808 	bl	8000f6c <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3750      	adds	r7, #80	; 0x50
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <MX_SPI5_Init+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fb0:	2218      	movs	r2, #24
 8000fb2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fc8:	220a      	movs	r2, #10
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_SPI5_Init+0x64>)
 8000fce:	f001 f897 	bl	8002100 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000fd8:	f7ff ffc8 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20002f68 	.word	0x20002f68
 8000fe4:	40015000 	.word	0x40015000

08000fe8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_SPI_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_SPI_MspInit+0x88>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001042:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001054:	2305      	movs	r3, #5
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 8001060:	f000 fa14 	bl	800148c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40015000 	.word	0x40015000
 8001070:	40023800 	.word	0x40023800
 8001074:	40021400 	.word	0x40021400

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f890 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopFillZerobss+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd7 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f001 fd6f 	bl	8002c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fe79 	bl	8000e68 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001178:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001184:	08002ce0 	.word	0x08002ce0
  ldr r2, =_sbss
 8001188:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800118c:	20002fc4 	.word	0x20002fc4

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f931 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff ff56 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f93b 	bl	8001472 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f911 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000004 	.word	0x20000004
 8001230:	2000000c 	.word	0x2000000c
 8001234:	20000008 	.word	0x20000008

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000000c 	.word	0x2000000c
 800125c:	20002fc0 	.word	0x20002fc0

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20002fc0 	.word	0x20002fc0

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff47 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff5c 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffb0 	bl	80013e0 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e177      	b.n	8001798 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 8166 	bne.w	8001792 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80c0 	beq.w	8001792 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_GPIO_Init+0x324>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_GPIO_Init+0x324>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_GPIO_Init+0x324>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a61      	ldr	r2, [pc, #388]	; (80017b4 <HAL_GPIO_Init+0x328>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <HAL_GPIO_Init+0x32c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d037      	beq.n	80016ca <HAL_GPIO_Init+0x23e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a57      	ldr	r2, [pc, #348]	; (80017bc <HAL_GPIO_Init+0x330>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <HAL_GPIO_Init+0x23a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d02b      	beq.n	80016c2 <HAL_GPIO_Init+0x236>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <HAL_GPIO_Init+0x338>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d025      	beq.n	80016be <HAL_GPIO_Init+0x232>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <HAL_GPIO_Init+0x33c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01f      	beq.n	80016ba <HAL_GPIO_Init+0x22e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a53      	ldr	r2, [pc, #332]	; (80017cc <HAL_GPIO_Init+0x340>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x22a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_GPIO_Init+0x344>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <HAL_GPIO_Init+0x348>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a50      	ldr	r2, [pc, #320]	; (80017d8 <HAL_GPIO_Init+0x34c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_GPIO_Init+0x350>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x21a>
 80016a2:	2309      	movs	r3, #9
 80016a4:	e012      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016a6:	230a      	movs	r3, #10
 80016a8:	e010      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016aa:	2308      	movs	r3, #8
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x328>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_GPIO_Init+0x354>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a34      	ldr	r2, [pc, #208]	; (80017e0 <HAL_GPIO_Init+0x354>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_GPIO_Init+0x354>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_GPIO_Init+0x354>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_GPIO_Init+0x354>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_GPIO_Init+0x354>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_GPIO_Init+0x354>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_GPIO_Init+0x354>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae84 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40022400 	.word	0x40022400
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001844:	f7ff fd0c 	bl	8001260 <HAL_GetTick>
 8001848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800184a:	e009      	b.n	8001860 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800184c:	f7ff fd08 	bl	8001260 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800185a:	d901      	bls.n	8001860 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e01f      	b.n	80018a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d1ee      	bne.n	800184c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001874:	f7ff fcf4 	bl	8001260 <HAL_GetTick>
 8001878:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800187a:	e009      	b.n	8001890 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800187c:	f7ff fcf0 	bl	8001260 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188a:	d901      	bls.n	8001890 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e007      	b.n	80018a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800189c:	d1ee      	bne.n	800187c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	420e0040 	.word	0x420e0040
 80018b0:	40007000 	.word	0x40007000
 80018b4:	420e0044 	.word	0x420e0044

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e267      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d00c      	beq.n	80018fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b82      	ldr	r3, [pc, #520]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d05b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d157      	bne.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e242      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x74>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6f      	ldr	r2, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6c      	ldr	r2, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 8001950:	4b69      	ldr	r3, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a68      	ldr	r2, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a65      	ldr	r2, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc76 	bl	8001260 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc72 	bl	8001260 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e207      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xc0>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc62 	bl	8001260 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc5e 	bl	8001260 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1f3      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1c7      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x244>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fc17 	bl	8001260 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fc13 	bl	8001260 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1a8      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4925      	ldr	r1, [pc, #148]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x244>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fbf6 	bl	8001260 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbf2 	bl	8001260 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e187      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d036      	beq.n	8001b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x248>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fbd6 	bl	8001260 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbd2 	bl	8001260 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e167      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x200>
 8001ad6:	e01b      	b.n	8001b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x248>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fbbf 	bl	8001260 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00e      	b.n	8001b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fbbb 	bl	8001260 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d907      	bls.n	8001b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e150      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ea      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8097 	beq.w	8001c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a7c      	ldr	r2, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a73      	ldr	r2, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb7b 	bl	8001260 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff fb77 	bl	8001260 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e10c      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a63      	ldr	r2, [pc, #396]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x324>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x30c>
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a5e      	ldr	r2, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5b      	ldr	r2, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x324>
 8001bc4:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fb3c 	bl	8001260 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb38 	bl	8001260 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0cb      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7ff fb26 	bl	8001260 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff fb22 	bl	8001260 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0b5      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a1 	beq.w	8001d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d05c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d141      	bne.n	8001cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff faf6 	bl	8001260 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff faf2 	bl	8001260 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e087      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff facb 	bl	8001260 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fac7 	bl	8001260 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e05c      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x416>
 8001cec:	e054      	b.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fab4 	bl	8001260 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff fab0 	bl	8001260 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e045      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x444>
 8001d1a:	e03d      	b.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e038      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4ec>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d028      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d121      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0cc      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d90c      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d044      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e067      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f9e2 	bl	8001260 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff f9de 	bl	8001260 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e04f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20c      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f942 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	40023800 	.word	0x40023800
 8001f68:	08002cc0 	.word	0x08002cc0
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f78:	b090      	sub	sp, #64	; 0x40
 8001f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f84:	2300      	movs	r3, #0
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8c:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	f200 80a1 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x3a>
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fac:	e09b      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fb2:	e098      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d028      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	627a      	str	r2, [r7, #36]	; 0x24
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fe0:	fb03 f201 	mul.w	r2, r3, r1
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	fb00 f303 	mul.w	r3, r0, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	4a43      	ldr	r2, [pc, #268]	; (80020fc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fee:	fba0 1202 	umull	r1, r2, r0, r2
 8001ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffa:	4413      	add	r3, r2
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	2200      	movs	r2, #0
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	61fa      	str	r2, [r7, #28]
 8002006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800200a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800200e:	f7fe f8ed 	bl	80001ec <__aeabi_uldivmod>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4613      	mov	r3, r2
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201a:	e053      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	2200      	movs	r2, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	617a      	str	r2, [r7, #20]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800202e:	f04f 0b00 	mov.w	fp, #0
 8002032:	4652      	mov	r2, sl
 8002034:	465b      	mov	r3, fp
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0159      	lsls	r1, r3, #5
 8002040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002044:	0150      	lsls	r0, r2, #5
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	ebb2 080a 	subs.w	r8, r2, sl
 800204e:	eb63 090b 	sbc.w	r9, r3, fp
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800205e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002062:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002066:	ebb2 0408 	subs.w	r4, r2, r8
 800206a:	eb63 0509 	sbc.w	r5, r3, r9
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	00eb      	lsls	r3, r5, #3
 8002078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207c:	00e2      	lsls	r2, r4, #3
 800207e:	4614      	mov	r4, r2
 8002080:	461d      	mov	r5, r3
 8002082:	eb14 030a 	adds.w	r3, r4, sl
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	eb45 030b 	adc.w	r3, r5, fp
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a4:	4621      	mov	r1, r4
 80020a6:	028a      	lsls	r2, r1, #10
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	2200      	movs	r2, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	60fa      	str	r2, [r7, #12]
 80020b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b8:	f7fe f898 	bl	80001ec <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3740      	adds	r7, #64	; 0x40
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	017d7840 	.word	0x017d7840

08002100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07b      	b.n	800220a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d009      	beq.n	8002138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
 800212a:	e005      	b.n	8002138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe ff48 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0104 	and.w	r1, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0210 	and.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b088      	sub	sp, #32
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_SPI_Transmit+0x22>
 8002230:	2302      	movs	r3, #2
 8002232:	e126      	b.n	8002482 <HAL_SPI_Transmit+0x270>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800223c:	f7ff f810 	bl	8001260 <HAL_GetTick>
 8002240:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002252:	2302      	movs	r3, #2
 8002254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002256:	e10b      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_SPI_Transmit+0x52>
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002268:	e102      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b0:	d10f      	bne.n	80022d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d007      	beq.n	80022f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f8:	d14b      	bne.n	8002392 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_Transmit+0xf6>
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d13e      	bne.n	8002386 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800232c:	e02b      	b.n	8002386 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d112      	bne.n	8002362 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	1c9a      	adds	r2, r3, #2
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002360:	e011      	b.n	8002386 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe ff7d 	bl	8001260 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Transmit+0x168>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Transmit+0x16e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002384:	e074      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ce      	bne.n	800232e <HAL_SPI_Transmit+0x11c>
 8002390:	e04c      	b.n	800242c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_SPI_Transmit+0x18e>
 800239a:	8afb      	ldrh	r3, [r7, #22]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d140      	bne.n	8002422 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023c6:	e02c      	b.n	8002422 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d113      	bne.n	80023fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80023fc:	e011      	b.n	8002422 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fe:	f7fe ff2f 	bl	8001260 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d803      	bhi.n	8002416 <HAL_SPI_Transmit+0x204>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d102      	bne.n	800241c <HAL_SPI_Transmit+0x20a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002420:	e026      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1cd      	bne.n	80023c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fbcb 	bl	8002bcc <SPI_EndRxTxTransaction>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	77fb      	strb	r3, [r7, #31]
 800246c:	e000      	b.n	8002470 <HAL_SPI_Transmit+0x25e>
  }

error:
 800246e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002480:	7ffb      	ldrb	r3, [r7, #31]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b088      	sub	sp, #32
 800248e:	af02      	add	r7, sp, #8
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a6:	d112      	bne.n	80024ce <HAL_SPI_Receive+0x44>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10e      	bne.n	80024ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2204      	movs	r2, #4
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f8f1 	bl	80026ac <HAL_SPI_TransmitReceive>
 80024ca:	4603      	mov	r3, r0
 80024cc:	e0ea      	b.n	80026a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_SPI_Receive+0x52>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0e3      	b.n	80026a4 <HAL_SPI_Receive+0x21a>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e4:	f7fe febc 	bl	8001260 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024fa:	e0ca      	b.n	8002692 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Receive+0x7e>
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800250c:	e0c1      	b.n	8002692 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2204      	movs	r2, #4
 8002512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002554:	d10f      	bne.n	8002576 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d007      	beq.n	8002594 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d162      	bne.n	8002662 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800259c:	e02e      	b.n	80025fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d115      	bne.n	80025d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f103 020c 	add.w	r2, r3, #12
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025d6:	e011      	b.n	80025fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d8:	f7fe fe42 	bl	8001260 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d803      	bhi.n	80025f0 <HAL_SPI_Receive+0x166>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d102      	bne.n	80025f6 <HAL_SPI_Receive+0x16c>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025fa:	e04a      	b.n	8002692 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1cb      	bne.n	800259e <HAL_SPI_Receive+0x114>
 8002606:	e031      	b.n	800266c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d113      	bne.n	800263e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	b292      	uxth	r2, r2
 8002622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	1c9a      	adds	r2, r3, #2
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800263c:	e011      	b.n	8002662 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800263e:	f7fe fe0f 	bl	8001260 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d803      	bhi.n	8002656 <HAL_SPI_Receive+0x1cc>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d102      	bne.n	800265c <HAL_SPI_Receive+0x1d2>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002660:	e017      	b.n	8002692 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1cd      	bne.n	8002608 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fa45 	bl	8002b00 <SPI_EndRxTransaction>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
 800268e:	e000      	b.n	8002692 <HAL_SPI_Receive+0x208>
  }

error :
 8002690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026ba:	2301      	movs	r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_SPI_TransmitReceive+0x26>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e18a      	b.n	80029e8 <HAL_SPI_TransmitReceive+0x33c>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026da:	f7fe fdc1 	bl	8001260 <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d00f      	beq.n	800271c <HAL_SPI_TransmitReceive+0x70>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002702:	d107      	bne.n	8002714 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <HAL_SPI_TransmitReceive+0x68>
 800270c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002710:	2b04      	cmp	r3, #4
 8002712:	d003      	beq.n	800271c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002714:	2302      	movs	r3, #2
 8002716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800271a:	e15b      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_SPI_TransmitReceive+0x82>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_SPI_TransmitReceive+0x82>
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002734:	e14e      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b04      	cmp	r3, #4
 8002740:	d003      	beq.n	800274a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2205      	movs	r2, #5
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	887a      	ldrh	r2, [r7, #2]
 800275a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	887a      	ldrh	r2, [r7, #2]
 8002772:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d007      	beq.n	800279e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a6:	d178      	bne.n	800289a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_SPI_TransmitReceive+0x10a>
 80027b0:	8b7b      	ldrh	r3, [r7, #26]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d166      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	1c9a      	adds	r2, r3, #2
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027da:	e053      	b.n	8002884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d11b      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x176>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <HAL_SPI_TransmitReceive+0x176>
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d113      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	881a      	ldrh	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d119      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x1b8>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d014      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	b292      	uxth	r2, r2
 8002846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	1c9a      	adds	r2, r3, #2
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002860:	2301      	movs	r3, #1
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002864:	f7fe fcfc 	bl	8001260 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002870:	429a      	cmp	r2, r3
 8002872:	d807      	bhi.n	8002884 <HAL_SPI_TransmitReceive+0x1d8>
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d003      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002882:	e0a7      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1a6      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x130>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1a1      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x130>
 8002898:	e07c      	b.n	8002994 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_TransmitReceive+0x1fc>
 80028a2:	8b7b      	ldrh	r3, [r7, #26]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d16b      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ce:	e057      	b.n	8002980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d11c      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x26c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_SPI_TransmitReceive+0x26c>
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d114      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d119      	bne.n	800295a <HAL_SPI_TransmitReceive+0x2ae>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d014      	beq.n	800295a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800295a:	f7fe fc81 	bl	8001260 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002966:	429a      	cmp	r2, r3
 8002968:	d803      	bhi.n	8002972 <HAL_SPI_TransmitReceive+0x2c6>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d102      	bne.n	8002978 <HAL_SPI_TransmitReceive+0x2cc>
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800297e:	e029      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1a2      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x224>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d19d      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f917 	bl	8002bcc <SPI_EndRxTxTransaction>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029b0:	e010      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10b      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	e000      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a00:	f7fe fc2e 	bl	8001260 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a10:	f7fe fc26 	bl	8001260 <HAL_GetTick>
 8002a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	0d1b      	lsrs	r3, r3, #20
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a26:	e054      	b.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d050      	beq.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a30:	f7fe fc16 	bl	8001260 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d902      	bls.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d13d      	bne.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5e:	d111      	bne.n	8002a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	d004      	beq.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d107      	bne.n	8002a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8c:	d10f      	bne.n	8002aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e017      	b.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d19b      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000004 	.word	0x20000004

08002b00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b14:	d111      	bne.n	8002b3a <SPI_EndRxTransaction+0x3a>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1e:	d004      	beq.n	8002b2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d107      	bne.n	8002b3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b42:	d12a      	bne.n	8002b9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d012      	beq.n	8002b74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff ff49 	bl	80029f0 <SPI_WaitFlagStateUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02d      	beq.n	8002bc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e026      	b.n	8002bc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff36 	bl	80029f0 <SPI_WaitFlagStateUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01a      	beq.n	8002bc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e013      	b.n	8002bc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff ff23 	bl	80029f0 <SPI_WaitFlagStateUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <SPI_EndRxTxTransaction+0x7c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <SPI_EndRxTxTransaction+0x80>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0d5b      	lsrs	r3, r3, #21
 8002be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf6:	d112      	bne.n	8002c1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fef4 	bl	80029f0 <SPI_WaitFlagStateUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e00f      	b.n	8002c3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d0f2      	beq.n	8002c1e <SPI_EndRxTxTransaction+0x52>
 8002c38:	e000      	b.n	8002c3c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c3a:	bf00      	nop
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	165e9f81 	.word	0x165e9f81

08002c50 <__libc_init_array>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	4d0d      	ldr	r5, [pc, #52]	; (8002c88 <__libc_init_array+0x38>)
 8002c54:	4c0d      	ldr	r4, [pc, #52]	; (8002c8c <__libc_init_array+0x3c>)
 8002c56:	1b64      	subs	r4, r4, r5
 8002c58:	10a4      	asrs	r4, r4, #2
 8002c5a:	2600      	movs	r6, #0
 8002c5c:	42a6      	cmp	r6, r4
 8002c5e:	d109      	bne.n	8002c74 <__libc_init_array+0x24>
 8002c60:	4d0b      	ldr	r5, [pc, #44]	; (8002c90 <__libc_init_array+0x40>)
 8002c62:	4c0c      	ldr	r4, [pc, #48]	; (8002c94 <__libc_init_array+0x44>)
 8002c64:	f000 f820 	bl	8002ca8 <_init>
 8002c68:	1b64      	subs	r4, r4, r5
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	42a6      	cmp	r6, r4
 8002c70:	d105      	bne.n	8002c7e <__libc_init_array+0x2e>
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c78:	4798      	blx	r3
 8002c7a:	3601      	adds	r6, #1
 8002c7c:	e7ee      	b.n	8002c5c <__libc_init_array+0xc>
 8002c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c82:	4798      	blx	r3
 8002c84:	3601      	adds	r6, #1
 8002c86:	e7f2      	b.n	8002c6e <__libc_init_array+0x1e>
 8002c88:	08002cd8 	.word	0x08002cd8
 8002c8c:	08002cd8 	.word	0x08002cd8
 8002c90:	08002cd8 	.word	0x08002cd8
 8002c94:	08002cdc 	.word	0x08002cdc

08002c98 <memset>:
 8002c98:	4402      	add	r2, r0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <memset+0xa>
 8002ca0:	4770      	bx	lr
 8002ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca6:	e7f9      	b.n	8002c9c <memset+0x4>

08002ca8 <_init>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

08002cb4 <_fini>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	bf00      	nop
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr
